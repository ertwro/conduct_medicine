{"version":3,"file":"vendor-legacy-Cc5Xokbk.js","sources":["../../node_modules/marked/lib/marked.esm.js","../../node_modules/dompurify/dist/purify.es.mjs"],"sourcesContent":["/**\n * marked v12.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            // precede setext continuation with 4 spaces so it isn't a setext\n            let text = cap[0].replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1');\n            text = rtrim(text.replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","/*! @license DOMPurify 3.2.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.6/LICENSE */\n\nconst {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor\n} = Object;\nlet {\n  freeze,\n  seal,\n  create\n} = Object; // eslint-disable-line import/no-mutable-exports\nlet {\n  apply,\n  construct\n} = typeof Reflect !== 'undefined' && Reflect;\nif (!freeze) {\n  freeze = function freeze(x) {\n    return x;\n  };\n}\nif (!seal) {\n  seal = function seal(x) {\n    return x;\n  };\n}\nif (!apply) {\n  apply = function apply(fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\nif (!construct) {\n  construct = function construct(Func, args) {\n    return new Func(...args);\n  };\n}\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySplice = unapply(Array.prototype.splice);\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\nconst objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\nconst regExpTest = unapply(RegExp.prototype.test);\nconst typeErrorCreate = unconstruct(TypeError);\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param func - The function to be wrapped and called.\n * @returns A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply(func) {\n  return function (thisArg) {\n    if (thisArg instanceof RegExp) {\n      thisArg.lastIndex = 0;\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return apply(func, thisArg, args);\n  };\n}\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param func - The constructor function to be wrapped and called.\n * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct(func) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return construct(func, args);\n  };\n}\n/**\n * Add properties to a lookup table\n *\n * @param set - The set to which elements will be added.\n * @param array - The array containing elements to be added to the set.\n * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns The modified set with added elements.\n */\nfunction addToSet(set, array) {\n  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n        element = lcElement;\n      }\n    }\n    set[element] = true;\n  }\n  return set;\n}\n/**\n * Clean up an array to harden against CSPP\n *\n * @param array - The array to be cleaned.\n * @returns The cleaned version of the array\n */\nfunction cleanArray(array) {\n  for (let index = 0; index < array.length; index++) {\n    const isPropertyExist = objectHasOwnProperty(array, index);\n    if (!isPropertyExist) {\n      array[index] = null;\n    }\n  }\n  return array;\n}\n/**\n * Shallow clone an object\n *\n * @param object - The object to be cloned.\n * @returns A new object that copies the original.\n */\nfunction clone(object) {\n  const newObject = create(null);\n  for (const [property, value] of entries(object)) {\n    const isPropertyExist = objectHasOwnProperty(object, property);\n    if (isPropertyExist) {\n      if (Array.isArray(value)) {\n        newObject[property] = cleanArray(value);\n      } else if (value && typeof value === 'object' && value.constructor === Object) {\n        newObject[property] = clone(value);\n      } else {\n        newObject[property] = value;\n      }\n    }\n  }\n  return newObject;\n}\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param object - The object to look up the getter function in its prototype chain.\n * @param prop - The property name for which to find the getter function.\n * @returns The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n    object = getPrototypeOf(object);\n  }\n  function fallbackValue() {\n    return null;\n  }\n  return fallbackValue;\n}\n\nconst html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\nconst svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\nconst svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nconst svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\nconst mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nconst mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\nconst text = freeze(['#text']);\n\nconst html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);\nconst svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\nconst mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\nconst xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n// eslint-disable-next-line unicorn/better-regex\nconst MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nconst ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nconst TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\nconst DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\nconst ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nconst IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp|matrix):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nconst IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nconst ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nconst DOCTYPE_NAME = seal(/^html$/i);\nconst CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n\nvar EXPRESSIONS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ARIA_ATTR: ARIA_ATTR,\n  ATTR_WHITESPACE: ATTR_WHITESPACE,\n  CUSTOM_ELEMENT: CUSTOM_ELEMENT,\n  DATA_ATTR: DATA_ATTR,\n  DOCTYPE_NAME: DOCTYPE_NAME,\n  ERB_EXPR: ERB_EXPR,\n  IS_ALLOWED_URI: IS_ALLOWED_URI,\n  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n  MUSTACHE_EXPR: MUSTACHE_EXPR,\n  TMPLIT_EXPR: TMPLIT_EXPR\n});\n\n/* eslint-disable @typescript-eslint/indent */\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\nconst NODE_TYPE = {\n  element: 1,\n  attribute: 2,\n  text: 3,\n  cdataSection: 4,\n  entityReference: 5,\n  // Deprecated\n  entityNode: 6,\n  // Deprecated\n  progressingInstruction: 7,\n  comment: 8,\n  document: 9,\n  documentType: 10,\n  documentFragment: 11,\n  notation: 12 // Deprecated\n};\nconst getGlobal = function getGlobal() {\n  return typeof window === 'undefined' ? null : window;\n};\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param trustedTypes The policy factory.\n * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n    return null;\n  }\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      }\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n    return null;\n  }\n};\nconst _createHooksMap = function _createHooksMap() {\n  return {\n    afterSanitizeAttributes: [],\n    afterSanitizeElements: [],\n    afterSanitizeShadowDOM: [],\n    beforeSanitizeAttributes: [],\n    beforeSanitizeElements: [],\n    beforeSanitizeShadowDOM: [],\n    uponSanitizeAttribute: [],\n    uponSanitizeElement: [],\n    uponSanitizeShadowNode: []\n  };\n};\nfunction createDOMPurify() {\n  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n  const DOMPurify = root => createDOMPurify(root);\n  DOMPurify.version = '3.2.6';\n  DOMPurify.removed = [];\n  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document || !window.Element) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n    return DOMPurify;\n  }\n  let {\n    document\n  } = window;\n  const originalDocument = document;\n  const currentScript = originalDocument.currentScript;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes\n  } = window;\n  const ElementPrototype = Element.prototype;\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const remove = lookupGetter(ElementPrototype, 'remove');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName\n  } = document;\n  const {\n    importNode\n  } = originalDocument;\n  let hooks = _createHooksMap();\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n    CUSTOM_ELEMENT\n  } = EXPRESSIONS;\n  let {\n    IS_ALLOWED_URI: IS_ALLOWED_URI$1\n  } = EXPRESSIONS;\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n  /*\n   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n    tagNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    attributeNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    allowCustomizedBuiltInElements: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: false\n    }\n  }));\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n  /* Output should be safe even for XML used within HTML and alike.\n   * This means, DOMPurify removes comments when containing risky content.\n   */\n  let SAFE_FOR_XML = true;\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc = null;\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n  const formElement = document.createElement('form');\n  const isRegexOrFunction = function isRegexOrFunction(testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n  /**\n   * _parseConfig\n   *\n   * @param cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function _parseConfig() {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n    PARSER_MEDIA_TYPE =\n    // eslint-disable-next-line unicorn/prefer-includes\n    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n    /* Set configuration parameters */\n    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : clone({});\n    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : clone({});\n    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, text);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, html$1);\n        addToSet(ALLOWED_ATTR, html);\n      }\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, svg$1);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, svgFilters);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, mathMl$1);\n        addToSet(ALLOWED_ATTR, mathMl);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n    }\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n      }\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n      }\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n      }\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n    CONFIG = cfg;\n  };\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);\n  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);\n  /**\n   * @param element a DOM element whose namespace is being checked\n   * @returns Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function _checkValidNamespace(element) {\n    let parent = getParentNode(element);\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template'\n      };\n    }\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n      }\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n    }\n    // For XHTML and XML documents that support custom namespaces\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return true;\n    }\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n  /**\n   * _forceRemove\n   *\n   * @param node a DOM node\n   */\n  const _forceRemove = function _forceRemove(node) {\n    arrayPush(DOMPurify.removed, {\n      element: node\n    });\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      getParentNode(node).removeChild(node);\n    } catch (_) {\n      remove(node);\n    }\n  };\n  /**\n   * _removeAttribute\n   *\n   * @param name an Attribute name\n   * @param element a DOM node\n   */\n  const _removeAttribute = function _removeAttribute(name, element) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: element.getAttributeNode(name),\n        from: element\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: element\n      });\n    }\n    element.removeAttribute(name);\n    // We void attribute values for unremovable \"is\" attributes\n    if (name === 'is') {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(element);\n        } catch (_) {}\n      } else {\n        try {\n          element.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n  /**\n   * _initDocument\n   *\n   * @param dirty - a string of dirty markup\n   * @return a DOM, filled with the dirty markup\n   */\n  const _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n    }\n    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n    const body = doc.body || doc.documentElement;\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n    }\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param root The root element or node to start traversing on.\n   * @return The created NodeIterator\n   */\n  const _createNodeIterator = function _createNodeIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root,\n    // eslint-disable-next-line no-bitwise\n    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n  };\n  /**\n   * _isClobbered\n   *\n   * @param element element to check for clobbering attacks\n   * @return true if clobbered, false if safe\n   */\n  const _isClobbered = function _isClobbered(element) {\n    return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');\n  };\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param value object to check whether it's a DOM node\n   * @return true is object is a DOM node\n   */\n  const _isNode = function _isNode(value) {\n    return typeof Node === 'function' && value instanceof Node;\n  };\n  function _executeHooks(hooks, currentNode, data) {\n    arrayForEach(hooks, hook => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  }\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   * @param currentNode to check for permission to exist\n   * @return true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function _sanitizeElements(currentNode) {\n    let content = null;\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n    /* Execute a hook if present */\n    _executeHooks(hooks.uponSanitizeElement, currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (SAFE_FOR_XML && currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w!]/g, currentNode.innerHTML) && regExpTest(/<[/\\w!]/g, currentNode.textContent)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove any occurrence of processing instructions */\n    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove any kind of possibly harmful comments */\n    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {\n          return false;\n        }\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {\n          return false;\n        }\n      }\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n          for (let i = childCount - 1; i >= 0; --i) {\n            const childClone = cloneNode(childNodes[i], true);\n            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n          }\n        }\n      }\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        content = stringReplace(content, expr, ' ');\n      });\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, {\n          element: currentNode.cloneNode()\n        });\n        currentNode.textContent = content;\n      }\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n    return false;\n  };\n  /**\n   * _isValidAttribute\n   *\n   * @param lcTag Lowercase tag name of containing element.\n   * @param lcName Lowercase attribute name.\n   * @param value Attribute value.\n   * @return Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n      return false;\n    }\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n      // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\n      // Alternative, second condition checks if it's an `is`-attribute, AND\n      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n      return false;\n    } else ;\n    return true;\n  };\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param tagName name of the tag of the node to sanitize\n   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n  };\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param currentNode to sanitize\n   */\n  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n    const {\n      attributes\n    } = currentNode;\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes || _isClobbered(currentNode)) {\n      return;\n    }\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n      forceKeepAttr: undefined\n    };\n    let l = attributes.length;\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const {\n        name,\n        namespaceURI,\n        value: attrValue\n      } = attr;\n      const lcName = transformCaseFunc(name);\n      const initValue = attrValue;\n      let value = name === 'value' ? initValue : stringTrim(initValue);\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n      value = hookEvent.attrValue;\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n      /* Work around a security issue with comments inside attributes */\n      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Handle attributes that require Trusted Types */\n      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n        if (namespaceURI) ; else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML':\n              {\n                value = trustedTypesPolicy.createHTML(value);\n                break;\n              }\n            case 'TrustedScriptURL':\n              {\n                value = trustedTypesPolicy.createScriptURL(value);\n                break;\n              }\n          }\n        }\n      }\n      /* Handle invalid data-* attribute set by try-catching it */\n      if (value !== initValue) {\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n          if (_isClobbered(currentNode)) {\n            _forceRemove(currentNode);\n          } else {\n            arrayPop(DOMPurify.removed);\n          }\n        } catch (_) {\n          _removeAttribute(name, currentNode);\n        }\n      }\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n  };\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n      /* Sanitize tags and elements */\n      _sanitizeElements(shadowNode);\n      /* Check attributes next */\n      _sanitizeAttributes(shadowNode);\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n  };\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty) {\n    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        const tagName = transformCaseFunc(dirty.nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n      // eslint-disable-next-line unicorn/prefer-includes\n      dirty.indexOf('<') === -1) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      }\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n    /* Now start iterating over the created document */\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Sanitize tags and elements */\n      _sanitizeElements(currentNode);\n      /* Check attributes next */\n      _sanitizeAttributes(currentNode);\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n    }\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n      return returnNode;\n    }\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n    /* Serialize doctype if allowed */\n    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n  };\n  DOMPurify.setConfig = function () {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n  DOMPurify.removeHook = function (entryPoint, hookFunction) {\n    if (hookFunction !== undefined) {\n      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n      return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];\n    }\n    return arrayPop(hooks[entryPoint]);\n  };\n  DOMPurify.removeHooks = function (entryPoint) {\n    hooks[entryPoint] = [];\n  };\n  DOMPurify.removeAllHooks = function () {\n    hooks = _createHooksMap();\n  };\n  return DOMPurify;\n}\nvar purify = createDOMPurify();\n\nexport { purify as default };\n//# sourceMappingURL=purify.es.mjs.map\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","inlineNormal","blockSkip","reflinkSearch","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parseInline","renderers","genericToken","ret","parser","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","markedInstance","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","onError","prototype","toString","all","catch","message","msg","reject","marked","getDefaults","entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","freeze","seal","construct","Reflect","x","fun","thisValue","Func","arrayForEach","unapply","Array","arrayLastIndexOf","arrayPop","arrayPush","arraySplice","stringToLowerCase","stringToString","stringMatch","stringReplace","stringIndexOf","stringTrim","objectHasOwnProperty","hasOwnProperty","regExpTest","typeErrorCreate","func","TypeError","_len2","arguments","_key2","thisArg","_len","_key","addToSet","set","array","transformCaseFunc","undefined","element","lcElement","cleanArray","clone","object","newObject","property","value","isArray","lookupGetter","desc","get","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","CUSTOM_ELEMENT","EXPRESSIONS","__proto__","NODE_TYPE","getGlobal","window","createDOMPurify","DOMPurify","root","version","removed","document","nodeType","Element","isSupported","originalDocument","currentScript","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","NamedNodeMap","MozNamedAttrMap","HTMLFormElement","DOMParser","trustedTypes","ElementPrototype","cloneNode","remove","getNextSibling","getChildNodes","getParentNode","template","createElement","ownerDocument","trustedTypesPolicy","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","afterSanitizeAttributes","afterSanitizeElements","afterSanitizeShadowDOM","beforeSanitizeAttributes","beforeSanitizeElements","beforeSanitizeShadowDOM","uponSanitizeAttribute","uponSanitizeElement","uponSanitizeShadowNode","createHTMLDocument","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","tagNameCheck","writable","configurable","enumerable","attributeNameCheck","allowCustomizedBuiltInElements","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","SAFE_FOR_XML","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","CONFIG","formElement","isRegexOrFunction","testValue","Function","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ADD_DATA_URI_TAGS","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","tbody","TRUSTED_TYPES_POLICY","createHTML","createScriptURL","purifyHostElement","createPolicy","suffix","ATTR_NAME","hasAttribute","getAttribute","policyName","scriptUrl","_createTrustedTypesPolicy","ALL_SVG_TAGS","ALL_MATHML_TAGS","_forceRemove","removeChild","_removeAttribute","attribute","getAttributeNode","from","removeAttribute","setAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","parseFromString","documentElement","createDocument","innerHTML","insertBefore","createTextNode","childNodes","_createNodeIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","SHOW_PROCESSING_INSTRUCTION","SHOW_CDATA_SECTION","_isClobbered","nodeName","textContent","attributes","namespaceURI","hasChildNodes","_isNode","_executeHooks","currentNode","data","hook","_sanitizeElements","tagName","allowedTags","firstElementChild","_isBasicCustomElement","parentNode","childClone","__removalCount","parent","parentTagName","Boolean","_checkValidNamespace","expr","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","forceKeepAttr","attr","initValue","getAttributeType","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","sanitize","importedNode","returnNode","appendChild","firstChild","nodeIterator","shadowroot","shadowrootmode","serializedHTML","outerHTML","doctype","setConfig","clearConfig","isValidAttribute","addHook","entryPoint","hookFunction","removeHook","removeHooks","removeAllHooks"],"mappings":"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","x_google_ignoreList":[0,1]}