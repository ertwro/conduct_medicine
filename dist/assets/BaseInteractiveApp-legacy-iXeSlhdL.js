System.register([],function(e,t){"use strict";return{execute:function(){e("B",class{constructor(e,t={}){this.containerId=e,this.container=null,this.options={title:"Medical Interactive Tool",specialty:"general",description:"",showResults:!0,allowExport:!1,...t},this.data={},this.results={},this.isInitialized=!1}async init(){if(!this.isInitialized){if(this.container=document.getElementById(this.containerId),!this.container)throw new Error(`Container with ID ${this.containerId} not found`);this.setupAppStructure(),await this.initializeApp(),this.setupEventListeners(),this.isInitialized=!0,console.log(`âœ… Interactive app initialized: ${this.options.title}`)}}setupAppStructure(){this.container.innerHTML=`\n      <div class="interactive-app" data-specialty="${this.options.specialty}">\n        <header class="app-header">\n          <h3 class="app-title">${this.options.title}</h3>\n          ${this.options.description?`<p class="app-description">${this.options.description}</p>`:""}\n          <div class="app-controls">\n            <button class="reset-btn" title="Reset">ðŸ”„</button>\n            ${this.options.allowExport?'<button class="export-btn" title="Export Results">ðŸ“Š</button>':""}\n            <button class="close-btn" title="Close">âœ•</button>\n          </div>\n        </header>\n        <main class="app-content">\n          <div class="app-form">\n            \x3c!-- App-specific form content will be inserted here --\x3e\n          </div>\n          ${this.options.showResults?'<div class="app-results" style="display: none;"></div>':""}\n        </main>\n        <footer class="app-footer">\n          <div class="app-disclaimer">\n            <p class="text-xs text-gray-400">\n              ðŸ”¬ For educational purposes only. Not a substitute for professional medical advice.\n            </p>\n          </div>\n        </footer>\n      </div>\n    `}setupEventListeners(){const e=this.container.querySelector(".reset-btn");e&&e.addEventListener("click",()=>this.reset());const t=this.container.querySelector(".export-btn");t&&t.addEventListener("click",()=>this.exportResults());const s=this.container.querySelector(".close-btn");s&&s.addEventListener("click",()=>this.close())}async initializeApp(){throw new Error("initializeApp() must be implemented by subclass")}calculate(){throw new Error("calculate() must be implemented by subclass")}getFormData(){const e=this.container.querySelectorAll("input, select, textarea"),t={};return e.forEach(e=>{const s=e.name||e.id;s&&("checkbox"===e.type?t[s]=e.checked:"radio"===e.type?e.checked&&(t[s]=e.value):t[s]=e.value)}),t}setFormData(e){Object.entries(e).forEach(([e,t])=>{const s=this.container.querySelector(`[name="${e}"], #${e}`);s&&("checkbox"===s.type?s.checked=Boolean(t):"radio"===s.type?s.value===t&&(s.checked=!0):s.value=t)})}showResults(e){const t=this.container.querySelector(".app-results");t&&(this.results=e,t.innerHTML=this.formatResults(e),t.style.display="block",t.scrollIntoView({behavior:"smooth",block:"nearest"}))}formatResults(e){return`\n      <div class="results-content">\n        <h4 class="results-title">Calculation Results</h4>\n        <div class="results-data">\n          ${Object.entries(e).map(([e,t])=>`\n            <div class="result-item">\n              <span class="result-label">${this.formatLabel(e)}:</span>\n              <span class="result-value">${this.formatValue(t)}</span>\n            </div>\n          `).join("")}\n        </div>\n      </div>\n    `}formatLabel(e){return e.replace(/([A-Z])/g," $1").replace(/^./,e=>e.toUpperCase()).trim()}formatValue(e){return"number"==typeof e?e.toFixed(2):"boolean"==typeof e?e?"Yes":"No":String(e)}showError(e){const t=this.container.querySelector(".app-results");t&&(t.innerHTML=`\n        <div class="error-message">\n          <h4 class="text-red-400">Error</h4>\n          <p>${e}</p>\n        </div>\n      `,t.style.display="block")}reset(){this.container.querySelectorAll("input, select, textarea").forEach(e=>{"checkbox"===e.type||"radio"===e.type?e.checked=!1:e.value=""});const e=this.container.querySelector(".app-results");e&&(e.style.display="none"),this.data={},this.results={},this.onReset()}onReset(){}exportResults(){if(!this.results||0===Object.keys(this.results).length)return void alert("No results to export. Please perform a calculation first.");const e={tool:this.options.title,specialty:this.options.specialty,timestamp:(new Date).toISOString(),inputs:this.data,results:this.results},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),s=URL.createObjectURL(t),n=document.createElement("a");n.href=s,n.download=`${this.options.title.replace(/\s+/g,"_")}_${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(s)}close(){this.container.dispatchEvent(new CustomEvent("app-close",{detail:{appId:this.containerId}}))}destroy(){this.container&&(this.container.innerHTML=""),this.isInitialized=!1}validateRequired(e){const t=[];return e.forEach(e=>{const s=this.container.querySelector(`[name="${e}"], #${e}`);s&&s.value.trim()||t.push(this.formatLabel(e))}),t}validateNumeric(e){const t=[];return e.forEach(e=>{const s=this.container.querySelector(`[name="${e}"], #${e}`);s&&s.value&&isNaN(Number(s.value))&&t.push(this.formatLabel(e))}),t}validateRange(e,t,s){const n=this.container.querySelector(`[name="${e}"], #${e}`);if(!n||!n.value)return null;const i=Number(n.value);return isNaN(i)?`${this.formatLabel(e)} must be a number`:i<t||i>s?`${this.formatLabel(e)} must be between ${t} and ${s}`:null}createFormField(e){const{type:t,name:s,label:n,options:i,required:a,placeholder:l,min:o,max:r,step:c}=e;let p="";const u=a?"required":"",d=`${this.containerId}-${s}`;switch(t){case"select":p=`\n          <div class="form-field">\n            <label for="${d}" class="form-label">${n}${a?" *":""}</label>\n            <select id="${d}" name="${s}" class="form-select" ${u}>\n              <option value="">Select...</option>\n              ${i.map(e=>`<option value="${e.value}">${e.label}</option>`).join("")}\n            </select>\n          </div>\n        `;break;case"number":p=`\n          <div class="form-field">\n            <label for="${d}" class="form-label">${n}${a?" *":""}</label>\n            <input type="number" id="${d}" name="${s}" class="form-input" \n                   placeholder="${l||""}" ${u}\n                   ${void 0!==o?`min="${o}"`:""}\n                   ${void 0!==r?`max="${r}"`:""}\n                   ${void 0!==c?`step="${c}"`:""}>\n          </div>\n        `;break;case"checkbox":p=`\n          <div class="form-field checkbox-field">\n            <label for="${d}" class="checkbox-label">\n              <input type="checkbox" id="${d}" name="${s}" class="form-checkbox" ${u}>\n              <span class="checkbox-text">${n}</span>\n            </label>\n          </div>\n        `;break;case"radio":p=`\n          <div class="form-field radio-group">\n            <fieldset>\n              <legend class="form-label">${n}${a?" *":""}</legend>\n              ${i.map(e=>`\n                <label class="radio-label">\n                  <input type="radio" name="${s}" value="${e.value}" class="form-radio" ${u}>\n                  <span class="radio-text">${e.label}</span>\n                </label>\n              `).join("")}\n            </fieldset>\n          </div>\n        `;break;default:p=`\n          <div class="form-field">\n            <label for="${d}" class="form-label">${n}${a?" *":""}</label>\n            <input type="text" id="${d}" name="${s}" class="form-input" \n                   placeholder="${l||""}" ${u}>\n          </div>\n        `}return p}})}}});
//# sourceMappingURL=BaseInteractiveApp-legacy-iXeSlhdL.js.map
